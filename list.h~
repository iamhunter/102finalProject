
#include <assert.h>

class link_t
{
	public:
   	link_t(void);     	      // constructor
   	link_t(void *);   	      // constructor(overloaded)
  	~link_t(void);    	      // destructor
   	void     set_next(link_t *);  // setter for next link
   	link_t  *get_next(void);      // getter to retrieve next pointer
   	void    *get_entity(void);    // getter to retrieve entity pointer

	private:
   	link_t  *next;
   	void    *entity;

};

typedef class list_t
{
	public:
   	list_t(void);                 // constructor
   	list_t(const list_t &);       // copy constructor
  	~list_t(void);		      // destructor
   	void   add(void *entity);     // add entity to end of list
   	void   *reset(void);          // set current to start of list
   	void   *get_entity(void);     // get current entity in list
   	int    not_end(void);
   	void   *next_link(void);       // next node in the list
        void   insert(void *entity);  // insert entity before current
   	void   remove(void );         // remove current entity

	private:
   	link_t *first;
   	link_t *last;
   	link_t *current;
} list_t;

