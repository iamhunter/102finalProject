/*   Greg Francis/Gfranci
     Cpsc102 Section 1
     10/05/15
     MPA#1
*/  

#include "ray.h"


static pparm_t camera_parse[] =
{
        {"pixeldim", 2, 4, "%d", 0},
        {"worlddim", 2, 8, "%lf", 0},
        {"viewpoint", 3, 8, "%lf", 0}
};        

#define NUM_ATTRS (sizeof(camera_parse) / sizeof(pparm_t))
camera_t::camera_t(FILE *in)
{
        char buf[256];
        int mask;
        
        assert(fscanf(in,"%s",name) == 1);
        
        fscanf(in,"%s", buf);
        assert(buf[0] == '{');
        
        cookie = CAM_COOKIE;
        
        camera_parse[0].loc = &pixel_dim;
        camera_parse[1].loc = &world_dim;
        camera_parse[2].loc = &view_point;
        
        mask = parser(in,camera_parse,NUM_ATTRS,0);
        assert(mask == 7);
        
        pixmap = (irgb_t *)malloc(sizeof(irgb_t) * pixel_dim[0] * pixel_dim[1]);   
        
}

void camera_t::store_pixel(int x, int y, drgb_t *pix)
{
        int maprow;
        irgb_t *maploc;
        
        maprow = pixel_dim[1] - y - 1;
        maploc = pixmap + maprow * pixel_dim[0] + x;
        
        pix->r = pix->r * 255 + 0.5;
	pix->g = pix->g * 255 + 0.5;
	pix->b = pix->b * 255 + 0.5;
	if(pix->r > 255){
		pix->r = 255;
	}
        if (pix->r < 0.0){
		pix->r = 0.0;
	}
	if(pix->g > 255){
		pix->g = 255;
	}
        if (pix->g < 0.0){
		pix->g = 0.0;
	}
	if(pix->b > 255){
		pix->b = 255;
	}
	if (pix->b < 0.0){
		pix->b = 0.0;
	}

        maploc->r = (unsigned char)pix->r;
        maploc->g = (unsigned char)pix->g;
        maploc->b = (unsigned char)pix->b;

}


int camera_t::getydim(void)
{
        return(pixel_dim[Y]);
}

int camera_t::getxdim(void)
{
        return(pixel_dim[X]);
}

void camera_t::getviewpt(vec_t *view)
{
        vec_copy(&view_point, view);
}

void camera_t::getdir(int x, int y, vec_t *dir)
{
        assert(cookie ==CAM_COOKIE);
	
	vec_t world;
	
	world.x = (((float)x / (pixel_dim[X] -1))*(world_dim[X]));
	world.y = (((float)y / (pixel_dim[Y] -1))*(world_dim[Y]));
	world.z = 0.0;
	
	vec_diff(&view_point,&world,dir);
	vec_unit(dir,dir);
}

void camera_t::camera_write_image(FILE *out)
{
        assert(cookie == CAM_COOKIE);
	
	fprintf(out, "P6\n");
	fprintf(out, "%d %d 255\n", pixel_dim[X], pixel_dim[Y]);
	fwrite(pixmap, sizeof(irgb_t), pixel_dim[X] * 
	                                    pixel_dim[Y],out);
}

void camera_t::camera_print(FILE *out)
{
	assert(cookie == CAM_COOKIE);
	
	fprintf(out,"%-12s %s\n","camera",name);
	fprintf(out,"%-12s %5d %5d \n","pixeldim",pixel_dim[X],
						  pixel_dim[Y]);
	fprintf(out,"%-12s %5.1lf %5.1lf \n", "worlddim",world_dim[X],
							 world_dim[Y]);
	fprintf(out,"%-12s %5.1lf %5.1lf %5.1lf \n", "viewpoint", 
	             view_point.x,view_point.y,view_point.z);
	fprintf(out,"\n");




}




































                 
        
        
    
        
        
